@page "/admin/dashboard"

@using TDelivery.Data
@using Microsoft.AspNetCore.Identity;

@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inherits OwningComponentBase<EncomendaService>

<MudText Typo="Typo.h2" Align="Align.Center" Color="Color.Dark" Class="mb-4"> Administrator Dashboard</MudText>
<MudGrid>
    <MudItem xs="12" sm="6" md="4">

        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Users</MudText>
                <MudText Typo="Typo.h5">@count.Count()</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Send" Color="Color.Info" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Tracked</MudText>
                <MudText Typo="Typo.h5">@nEncomendas</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.DriveEta" Color="Color.Warning" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Couriers</MudText>
                <MudText Typo="Typo.h5">@nEntregadores</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-2">
            <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels"></MudChart>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-2">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series1" @bind-SelectedIndex="Index1" XAxisLabels="@XAxisLabels1" Width="100%" Height="300px"></MudChart>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-2">
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-2">
            <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px" />
        </MudPaper>
    </MudItem>
</MudGrid>

@code{
    int nEncomendas;
    int nEntregadores;
    List<IdentityUser> count = new List<IdentityUser>();

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    public double[] data = { 50, 25, 20, 5 };
    public string[] labels = { "Category #01", "Category #02", "Category #03", "Category #04" };

    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>()
{
        new ChartSeries() { Name = "Express Courier", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Global Courier", Data = new double[] { 35, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    private int Index1 = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series1 = new List<ChartSeries>()
{
        new ChartSeries() { Name = "Courier #01", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = "Courier #02", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = "Courier #03", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels1 = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    EarningReport[] earningReports = new EarningReport[]
    {
        new EarningReport { Name = "Lunees", Title = "Reactor Engineer", Avatar = "https://avatars2.githubusercontent.com/u/71094850?s=460&u=66c16f5bb7d27dc751f6759a82a3a070c8c7fe4b&v=4", Salary = "$0.99", Severity = Color.Success, SeverityTitle = "Low"},
        new EarningReport { Name = "Mikes-gh", Title = "Developer", Avatar = "https://avatars.githubusercontent.com/u/16208742?s=120&v=4", Salary = "$19.12K", Severity = Color.Secondary, SeverityTitle = "Medium"},
        new EarningReport { Name = "Garderoben", Title = "CSS Magician", Avatar = "https://avatars2.githubusercontent.com/u/10367109?s=460&amp;u=2abf95f9e01132e8e2915def42895ffe99c5d2c6&amp;v=4", Salary = "$1337", Severity = Color.Primary, SeverityTitle = "High"},
                                };

    class EarningReport
    {
        public string Avatar;
        public string Name;
        public string Title;
        public Color Severity;
        public string SeverityTitle;
        public string Salary;
    }

    async Task work()
    {
        nEncomendas = await @Service.GetEncomendas();
        nEntregadores = await @Service.GetEntregadores();
    }

    protected override async Task OnInitializedAsync()
    {
        await work();
        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            count.Add(item);
        }
    }
}
